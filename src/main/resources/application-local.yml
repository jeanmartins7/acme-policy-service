server:
  port: 8090

aws:
  dynamodb:
    endpoint: "http://localhost:8000"
  region: "us-east-1"
  accessKeyId: "fakeAccessKeyId"
  secretAccessKey: "fakeSecretAccessKey"

fraud:
  api:
    url: "http://localhost:8080"


spring:
  application:
    name: order-microservice
  jackson:
    property-naming-strategy: SNAKE_CASE
  kafka:
    bootstrap-servers: localhost:29092
    consumer:
      group-id: order-microservice-group
    properties:
      schema:
        registry:
          url: http://localhost:8081
    producer:
      properties:
        schema.registry.url: http://localhost:8081
  main:
    banner-mode: 'off'
  native:
    remove-unused-autoconfig: true
    remove-yaml-jackson-auto-configurations: true

app:
  event:
    source-id: "policy-service-instance-01"

policy:
  kafka:
    topics:
      status-notifications: "policy-status-notifications-topic"
      payment-events: "payment-confirmed-events-topic"
      subscription-events: "subscription-authorized-events-topic"
      dead-letter-queue: "policy-dlq-topic"


receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318
      grpc:
        endpoint: 0.0.0.0:4317

exporters:
  debug:

  otlp:
    endpoint: "jaeger:4317"
    tls:
      insecure: true

processors:
  batch:
    timeout: 1s
    send_batch_size: 512

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp, debug]

logging:
  config: classpath:logback-spring.xml
  level:
    com.acmeinsurance.order: DEBUG
    software.amazon.awssdk: INFO
    org.springframework.cloud.openfeign: DEBUG
    org.springframework.kafka: INFO
    reactor: INFO
    org.apache.kafka: INFO
    io.confluent: INFO